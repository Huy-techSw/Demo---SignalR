// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace FA24_PRN221_3W_G3_KoiCareSystemAtHome.Repositories.Models;

public partial class FA24_PRN221_3W_G3_KoiCareSystemAtHomeContext : DbContext
{
    public FA24_PRN221_3W_G3_KoiCareSystemAtHomeContext()
    {
    }

    public FA24_PRN221_3W_G3_KoiCareSystemAtHomeContext(DbContextOptions<FA24_PRN221_3W_G3_KoiCareSystemAtHomeContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<KoiFish> KoiFishes { get; set; }

    public virtual DbSet<KoiGrowthLog> KoiGrowthLogs { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderItem> OrderItems { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<Pond> Ponds { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<WaterParameter> WaterParameters { get; set; }

    public virtual DbSet<WaterParameterLimit> WaterParameterLimits { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<KoiFish>(entity =>
        {
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Size).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Weight).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Pond).WithMany(p => p.KoiFishes).HasForeignKey(d => d.PondId);

            entity.HasOne(d => d.User).WithMany(p => p.KoiFishes).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<KoiGrowthLog>(entity =>
        {
            entity.Property(e => e.FoodRecomment).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Size).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Weight).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Fish).WithMany(p => p.KoiGrowthLogs).HasForeignKey(d => d.FishId);
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.User).WithMany(p => p.Orders).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<OrderItem>(entity =>
        {
            entity.HasOne(d => d.Order).WithMany(p => p.OrderItems).HasForeignKey(d => d.OrderId);

            entity.HasOne(d => d.Product).WithMany(p => p.OrderItems).HasForeignKey(d => d.ProductId);
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.Property(e => e.DiscountApplied).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Total).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Order).WithMany(p => p.Payments).HasForeignKey(d => d.OrderId);

            entity.HasOne(d => d.Payer).WithMany(p => p.Payments)
                .HasForeignKey(d => d.PayerId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.Payments).HasForeignKey(d => d.PaymentMethodId);
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.Property(e => e.MethodName).IsRequired();
        });

        modelBuilder.Entity<Pond>(entity =>
        {
            entity.Property(e => e.Depth).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PumpCapacity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Size).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Volume).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.User).WithMany(p => p.Ponds).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Category).WithMany(p => p.Products).HasForeignKey(d => d.CategoryId);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasOne(d => d.Role).WithMany(p => p.Users).HasForeignKey(d => d.RoleId);
        });

        modelBuilder.Entity<WaterParameter>(entity =>
        {
            entity.Property(e => e.No2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.No3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.O2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Ph).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Po4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Salinity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Temperature).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Pond).WithMany(p => p.WaterParameters).HasForeignKey(d => d.PondId);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}